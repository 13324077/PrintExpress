using System;
using System.Collections.Generic;
using System.Drawing;
using System.Drawing.Printing;
using System.IO;
using ZXing.QrCode;
using ZXing;
using ZXing.Common;
using pringApp;
using Newtonsoft.Json.Linq;
using System.Windows.Forms;
using System.Drawing.Drawing2D;
using System.Text.RegularExpressions;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json;
namespace PrintApp
{
    class PrintService
    {
        private EncodingOptions options = null;
        private BarcodeWriter writer = null;
        private Margins margin;
        private PrintDocument printDocument;
        //打印的当前页
        private int _curr;
        private JArray ticketFaces;
        private Boolean isSetting;
        private string imgbase64 = "";
        
        //打印票面的方法
        public PrintService(PrintSetting printSetting, JArray printItems)
        {
            ticketFaces = printItems;
            if (printSetting != null && printSetting.priterName != null)
            {
                printDocument = new PrintDocument();
                //获取边距
                //printSetting.Left,  printSetting.Top
                //获取打印设置
                printDocument.PrinterSettings.PrinterName = printSetting.priterName;
                isSetting = true;
            }
            else
            {
               
                MessageBox.Show("请设置面单的打印机", "设置打印机", MessageBoxButtons.OK, MessageBoxIcon.None, MessageBoxDefaultButton.Button1, MessageBoxOptions.ServiceNotification);
            }
        }
        public Boolean isSetPrint() {
            return isSetting;
        }
        //打印方法
        public void Print()
        {
            if (!isSetting) {
                return;
            }
            printDocument.DefaultPageSettings.Landscape = true; //横向打印
            printDocument.PrintController = new StandardPrintController();
            printDocument.PrintPage += printDocument_PrintPage;
            //printDocument.BeginPrint +=;
            //如果不适用缺省纸张则创建一个自定义纸张，注意，必须使用这个版本的构造函数才是自定义的纸张
    

            //将缺省的纸张设置为新建的自定义纸张
           // printDocument.DefaultPageSettings.PaperSize = ps;
            printDocument.DefaultPageSettings.Margins.Top = 0;  //设置顶部页边距 
            printDocument.DefaultPageSettings.Margins.Left = 1;  //设置顶部页边距 
         
            //printDocument.DefaultPageSettings.Margins.Right = 50;
            //printDocument.DefaultPageSettings.Margins.Bottom = 0;
            printDocument.OriginAtMargins = false;   //true = soft margins, false = hard margins
            printDocument.DefaultPageSettings.Landscape = false;

            printDocument.OriginAtMargins = true;
            printDocument.Print(); //打印
        }
        //打印事件
        private void printDocument_PrintPage(object sender, PrintPageEventArgs e)
        {

            //创建Graphics类对象
            Graphics g = e.Graphics;
          
            RectangleF marginBounds = e.MarginBounds;

            // Grab a copy of our "hard margins" (printer's capabilities) 
            // This varies between printer models. Software printers like 
            // CutePDF will have no "physical limitations" and so will return 
            // the full page size 850,1100 for a letter page size.
            RectangleF printableArea = e.PageSettings.PrintableArea;

            // If we are print to a print preview control, the origin won't have 
            // been automatically adjusted for the printer's physical limitations. 
            // So let's adjust the origin for preview to reflect the printer's 
            // hard margins.

            g.TranslateTransform(printableArea.X, printableArea.Y);

            Brush brush = new SolidBrush(Color.Black);
            //以毫米为单位画图
            g.PageUnit = GraphicsUnit.Millimeter;
            Font fontsj = new Font("宋体", (float)12, FontStyle.Regular);
       
            StringFormat sf = new StringFormat();
            sf.LineAlignment = StringAlignment.Near;
            //Response.Write("ID:" + obj["ID"].ToString() + "    Name:" + obj["Name"].ToString() + "     ");
            sf.Alignment = StringAlignment.Far;

            Font fontddyun = new Font("宋体", (float)14, FontStyle.Bold);
            Font fonttxtRegular = new Font("宋体", (float)10, FontStyle.Regular);

            Pen newPen = new Pen(Color.Black, (float)0.1);//定义一个画笔
            int i = _curr;

            Console.WriteLine("======qrcode=========Width==================" + ticketFaces[i].ToString());

            JObject tempo = JObject.Parse(ticketFaces[i].ToString());
            //------------------面单上联---------------------------------------------------
            string number = (string)tempo["number"].ToString(); //快递单号
            drawTitle(g, 0, brush, number);

            drawLine(g, 0, brush);
            JObject recipientJson = (JObject)tempo["recipient"]; //收件人
                                                                 //收件人
            drawRecipients(g, 0, brush, recipientJson);
            drawLine(g, 20, brush);
         

            JObject ordersJson = (JObject)tempo["orders"]; //配送信息
                                                           //配送信息
            drawDistInfo(g, 0, brush, ordersJson);

            drawLine(g, 50, brush);
            //投保礼
            //string gift = (string)tempo["gift"].ToString(); //快递单号
            //drawGift(g, 0, brush, gift);

            //drawLine(g, 65, brush);
            //寄件人
            JObject senderJson = (JObject)tempo["sender"]; //收件人
            drawSender(g, -15, brush, senderJson);
            //g.DrawLine(newPen, (float)2, (float)95, (float)102, (float)95);
            drawLine(g, 80-15, brush);

            g.DrawString("签收人:", fonttxtRegular, brush, (float)4, (float)98-15);
            g.DrawString("日期:", fonttxtRegular, brush, (float)60, (float)98 - 15);
            //------------------面单下联---------------------------------------------------
            drawTitle(g, 111, brush, number);
            drawLine(g, 111, brush);
            //收件人
            drawRecipients(g, 111, brush, recipientJson);
            drawLine(g, 130, brush);
            //寄件人
            drawSender(g, 67, brush, senderJson);

            //点点好车主二维码

            drawWxgzh(g, brush);
            drawLine(g, 147, brush);

            //备注
            string remark = (string)tempo["remark"].ToString(); //备注
            drawRemarks(g, 165, brush, remark);

            drawLine(g, 162, brush);

            i++;
            if (i < ticketFaces.Count)
             {
              this._curr = i;
              e.HasMorePages = true;
              }
              else
             {
                e.HasMorePages = false;
              }

        }

        private void drawTitle(Graphics g, float step, Brush brush,string number)
        {
            Font fontddyun = new Font("宋体", (float)14, FontStyle.Bold);


            // 点点云鸟
            g.DrawString("", fontddyun, brush, (float)4, (float)8 + step);
            string code = number;

            g.DrawImage(barCode(g, code), new PointF[]
               {
                    new PointF((int) Math.Round((float)48), (int) Math.Round((float)3+step)),
                    new PointF((int) Math.Round((float)98), (int) Math.Round((float)3+step)),
                    new PointF((int) Math.Round((float)48), (int) Math.Round((float)16+step))
               });
        }

        private void drawLine(Graphics g, float step, Brush brush)
        {
            //打印不画底图
            Pen newPen = new Pen(Color.Black, (float)0.1);//定义一个画笔
            g.DrawLine(newPen, (float)2, (float)15 + step, (float)102, (float)15 + step);
        }

        private void drawRecipients(Graphics g, float step, Brush brush, JObject recipientJson)
        {
            Font fontsj = new Font("宋体", (float)12, FontStyle.Regular);

            string name = recipientJson["name"].ToString();
            string phone = recipientJson["phone"].ToString();
            string address = recipientJson["address"].ToString();
            g.DrawString("收件", fontsj, new SolidBrush(Color.Black), 4, 20 + step, new StringFormat(StringFormatFlags.DirectionVertical));
            Font fonttxtbold = new Font("宋体", (float)10, FontStyle.Bold);
            Font fonttxtRegular = new Font("宋体", (float)10, FontStyle.Regular);
            g.DrawString(name, fonttxtbold, brush, (float)12, (float)18 + step);
            g.DrawString("", fonttxtbold, brush, (float)30, (float)18 + step);
            System.Drawing.Rectangle fontRectanledizhi = new System.Drawing.Rectangle(12, 23 + (int)step, 90, 10);
            StringFormat sfFar = new StringFormat();
            sfFar.Alignment = StringAlignment.Near;
            sfFar.LineAlignment = StringAlignment.Near;

            g.DrawString(address, fonttxtbold, brush, fontRectanledizhi, sfFar);
        }

        private void drawDistInfo(Graphics g, float step, Brush brush,JObject ordersJson)
        {
            Font fontsj = new Font("宋体", (float)12, FontStyle.Regular);
            Font fonttxtbold = new Font("宋体", (float)10, FontStyle.Bold);
            Font fonttxtRegular = new Font("宋体", (float)10, FontStyle.Regular);

            string orderNo = ordersJson["orderNo"].ToString();
            string total = ordersJson["total"].ToString();
            string licenceNo = ordersJson["licenceNo"].ToString(); 
            g.DrawString("配送信息", fontsj, new SolidBrush(Color.Black), 4, 40, new StringFormat(StringFormatFlags.DirectionVertical));

            g.DrawString("订单号:", fonttxtRegular, brush, (float)12, (float)37);
            g.DrawString(orderNo, fonttxtRegular, brush, (float)25, (float)37);
            JArray items = (JArray)JsonConvert.DeserializeObject(ordersJson["product"].ToString());
            int stepext = 42;
            for (int a = 0; a < items.Count; a = a + 1)
            {
                if(a > 2){
                    //更多扫描二维码查看
                    break;
                }
                JObject tempo = JObject.Parse(items[a].ToString());
                g.DrawString("产品:", fonttxtRegular, brush, (float)12, (float)stepext);
                g.DrawString(tempo["prName"].ToString(), fonttxtRegular, brush, (float)20, (float)stepext);
                g.DrawString("投保公司:", fonttxtRegular, brush, (float)32, (float)stepext);
                g.DrawString(tempo["company"].ToString(), fonttxtRegular, brush, (float)48, (float)stepext);
                stepext = stepext + 5;
               
            }

            Font fontdd = new Font("宋体", (float)12, FontStyle.Bold);
            g.DrawString("订单总额:", fontdd, brush, (float)12, (float)stepext+7);
            g.DrawString(total+"元", fontdd, brush, (float)32, (float)stepext+7);


            Bitmap qrcode = qrCode(orderNo, licenceNo);

            Console.WriteLine("======qrcode=========Width==================" + qrcode.Width);
            Console.WriteLine("======qrcode=========Height==================" + qrcode.Height);

            g.DrawImage(qrcode, new PointF[]
                {
                new PointF((int) Math.Round((float)65), (int) Math.Round((float)37)),
                new PointF((int) Math.Round((float)90), (int) Math.Round((float)37)),
                new PointF((int) Math.Round((float)65), (int) Math.Round((float)62))
                });
            g.DrawString("详情及付款扫码", fonttxtRegular, brush, (float)91, (float)37, new StringFormat(StringFormatFlags.DirectionVertical));

        }

        private void drawGift(Graphics g, float step, Brush brush,string gift)
        {
            Font fontsj = new Font("宋体", (float)12, FontStyle.Regular);
            Font fonttxtbold = new Font("宋体", (float)10, FontStyle.Bold);
            Font fonttxtRegular = new Font("宋体", (float)8, FontStyle.Regular);
            g.DrawString("投保礼", fontsj, new SolidBrush(Color.Black), 4, 66, new StringFormat(StringFormatFlags.DirectionVertical));
            System.Drawing.Rectangle fontRectanle = new System.Drawing.Rectangle(12, 67, 85, 15);
            StringFormat sfFar = new StringFormat();
            sfFar.Alignment = StringAlignment.Near;
            sfFar.LineAlignment = StringAlignment.Near;
            g.DrawString(gift, fonttxtRegular, new SolidBrush(Color.Black), fontRectanle, sfFar);
        }

        private void drawSender(Graphics g, float step, Brush brush, JObject senderJson)
        {
            Font fontsj = new Font("宋体", (float)12, FontStyle.Regular);
            Font fonttxtbold = new Font("宋体", (float)10, FontStyle.Bold);
            Font fonttxtRegular = new Font("宋体", (float)10, FontStyle.Regular);

            string name = senderJson["name"].ToString();
            string phone = senderJson["phone"].ToString();
            g.DrawString("寄件", fontsj, new SolidBrush(Color.Black), 4, 82 + step, new StringFormat(StringFormatFlags.DirectionVertical));
            g.DrawString("顾问:", fonttxtRegular, brush, (float)12, (float)83 + step);
            g.DrawString(name, fonttxtRegular, brush, (float)20, (float)83 + step);
           // g.DrawString("电话:", fonttxtRegular, brush, (float)12, (float)88 + step);
            //g.DrawString(phone, fonttxtRegular, brush, (float)20, (float)88 + step);
        }
        private void drawWxgzh(Graphics g, Brush brush)
        {
            //点点好车主二维码
            Bitmap bitbmp = Base64StringToImage(imgbase64);
            Font fonttxtRegular = new Font("宋体", (float)9, FontStyle.Regular);
            g.DrawImage(bitbmp, new PointF[]
                          {
                new PointF((int) Math.Round((float)75), (int) Math.Round((float)146.5)),
                new PointF((int) Math.Round((float)90), (int) Math.Round((float)146.5)),
                new PointF((int) Math.Round((float)75), (int) Math.Round((float)161.5))
                          });
            g.DrawString("点点好车主", fonttxtRegular, brush, (float)91, (float)145, new StringFormat(StringFormatFlags.DirectionVertical));
        }
        private void drawRemarks(Graphics g, float step, Brush brush,String remark)
        {
            Font fontsj = new Font("宋体", (float)12, FontStyle.Regular);
        
            Font fonttxtRegular = new Font("宋体", (float)8, FontStyle.Regular);
            g.DrawString("备注", fontsj, new SolidBrush(Color.Black), 4, step, new StringFormat(StringFormatFlags.DirectionVertical));
            Rectangle fontRectanle = new Rectangle(12, (int)step-2, 85, 15);
            StringFormat sfFar = new StringFormat();
            sfFar.Alignment = StringAlignment.Near;
            sfFar.LineAlignment = StringAlignment.Near;

            //int count1 = GetContentLengthString("客户要早上10之前送单去 麻烦机构尽量安排一下  客户是转保");
           // Console.WriteLine("======count1==========================="+ count1);
           // int count2 = GetContentLengthString("客户要早上10之前送单去 麻烦机构尽量安排一下  客户是转保需要送单师傅帮忙拍一下行驶证和身份证客户不想在微信发我 700元（加油卡）路吉星电子狗、车载吸尘器、磁铁手机支架、金属车载充");
           // Console.WriteLine("======count2===========================" + count2);
            g.DrawString(remark, fonttxtRegular, new SolidBrush(Color.Black), fontRectanle, sfFar);
        }
        // private void DrawShouJianren();
        protected string ImgToBase64String(string Imagefilename)
        {
            try
            {
                Bitmap bmp = new Bitmap(Imagefilename);

                MemoryStream ms = new MemoryStream();
                bmp.Save(ms, System.Drawing.Imaging.ImageFormat.Jpeg);
                byte[] arr = new byte[ms.Length];
                ms.Position = 0;
                ms.Read(arr, 0, (int)ms.Length);
                ms.Close();
                return Convert.ToBase64String(arr);
            }
            catch (Exception ex)
            {
                return null;
            }
        }
        private Bitmap barCode(Graphics g, string code)
        {
            // 1.设置条形码规格
            EncodingOptions encodeOption = new EncodingOptions();
            encodeOption.Height = 60; // 必须制定高度、宽度
            encodeOption.Width = 50;
            encodeOption.PureBarcode = false;
            // 2.生成条形码图片并保存
            BarcodeWriter wr = new BarcodeWriter();
            wr.Options = encodeOption;
            wr.Format = BarcodeFormat.CODE_128;
            // 生成图片
            return wr.Write(code); ;

        }
        private Bitmap qrCode(string orderNo, string licenceNo)
        {
            QrCodeEncodingOptions options = new QrCodeEncodingOptions
            {
                DisableECI = true,
                CharacterSet = "UTF-8",
                Margin = 0,
                Width = 90,
                Height = 90
            };
            Console.WriteLine("======Bitmap=========orderNo.Length==================" + orderNo.Length);
            if (orderNo.Length >11) {
                options.Width = 150;
                options.Height = 150;
            }

            //构造二维码写码器
            MultiFormatWriter writer = new MultiFormatWriter();
            Dictionary<EncodeHintType, object> hint = new Dictionary<EncodeHintType, object>();
            hint.Add(EncodeHintType.CHARACTER_SET, "UTF-8");
            hint.Add(EncodeHintType.MARGIN, 0);
            hint.Add(EncodeHintType.ERROR_CORRECTION, ZXing.QrCode.Internal.ErrorCorrectionLevel.H);


            BitMatrix bm = writer.encode("http://dev.ddyunf.com/ping/getPayInfo?orderId=" + orderNo, BarcodeFormat.QR_CODE, options.Width, options.Height, hint);
            BarcodeWriter barcodeWriter = new BarcodeWriter();
            barcodeWriter.Options = options;
            Bitmap map = barcodeWriter.Write(bm);
            Console.WriteLine("======Bitmap=========Width==================" + map.Width);
            Console.WriteLine("======Bitmap=========Height==================" + map.Height);
            // //将img转换成bmp格式，否则后面无法创建Graphics对象
            Bitmap bmpimg = new Bitmap(map.Width, map.Height);
            using (Graphics qrCodeg = Graphics.FromImage(bmpimg))
            {
                qrCodeg.InterpolationMode = InterpolationMode.HighQualityBicubic;
                qrCodeg.SmoothingMode = SmoothingMode.HighQuality;
                qrCodeg.CompositingQuality = CompositingQuality.HighQuality;
                qrCodeg.DrawImage(map, 0, 0);
            }
            float fontsize = 10F;
            if (orderNo.Length > 11)
            {
                fontsize = 16F;
            } 


                Bitmap logo = ConvertTextToImage(licenceNo, "宋体", fontsize, Color.White, Color.Black);
            // 获取二维码实际尺寸（去掉二维码两边空白后的实际尺寸）
            int[] rectangle = bm.getEnclosingRectangle();

            //计算插入图片的大小和位置

            int middleL = (map.Width - logo.Width) / 2;
            int middleT = (map.Height - logo.Height) / 2;


            //将二维码插入图片
           Graphics myGraphic = Graphics.FromImage(bmpimg);
            //白底
            myGraphic.FillRectangle(Brushes.White, middleL, middleT, logo.Width, logo.Height);
            myGraphic.DrawImage(logo, middleL, middleT, logo.Width, logo.Height);
            return bmpimg;



        }


        public Bitmap ConvertTextToImage(string txt, string fontname, float fontsize, Color bgcolor, Color fcolor)
        {

            StringFormat sfFar = new StringFormat();
            sfFar.Alignment = StringAlignment.Near;
            sfFar.LineAlignment = StringAlignment.Far;
            Font font = new Font(fontname, fontsize, System.Drawing.FontStyle.Regular);

            Bitmap objBmpImage = new Bitmap(1, 1);
            // Create a graphics object to measure the text's width and height.
            Graphics objGraphics = Graphics.FromImage(objBmpImage);

            // This is where the bitmap size is determined.
            int width = (int)objGraphics.MeasureString(txt, font).Width;
            int height = (int)objGraphics.MeasureString(txt, font).Height;

            Bitmap bmp = new Bitmap(width, height);


            using (Graphics graphics = Graphics.FromImage(bmp))
            {
                //graphics.PageUnit = GraphicsUnit.Display;

                graphics.SmoothingMode = SmoothingMode.AntiAlias; //使绘图质量最高，即消除锯齿
                graphics.InterpolationMode = InterpolationMode.HighQualityBicubic;
                graphics.CompositingQuality = CompositingQuality.HighQuality;

                Brush brush = new SolidBrush(Color.Black);
                System.Drawing.Rectangle fontRectanle = new System.Drawing.Rectangle(0, 0, width, height);
                graphics.DrawString(txt, font, brush, 0, 0);

                graphics.Flush();
                font.Dispose();
                graphics.Dispose();
            }


            return bmp;
        }


        protected Bitmap Base64StringToImage(string strbase64)
        {
            try
            {
                byte[] arr = Convert.FromBase64String(strbase64);
                MemoryStream ms = new MemoryStream(arr);
                Bitmap bmp = new Bitmap(ms);
                ms.Close();
                return bmp;
            }
            catch (Exception ex)
            {
                return null;
            }
        }

        public Stream BytesToStream(byte[] bytes)
        {
            Stream stream = new MemoryStream(bytes);
            return stream;
        }

        public static byte[] BitmapToBytes(Bitmap Bitmap)
        {
            MemoryStream ms = null;
            try
            {
                ms = new MemoryStream();
                Bitmap.Save(ms, Bitmap.RawFormat);
                byte[] byteImage = new Byte[ms.Length];
                byteImage = ms.ToArray();
                return byteImage;
            }
            catch (ArgumentNullException ex)
            {
                throw ex;
            }
            finally
            {
                ms.Close();
            }
        }

        public void StreamToFile(Stream stream, string fileName)
        {
            // 把 Stream 转换成 byte[]  
            byte[] bytes = new byte[stream.Length];
            stream.Read(bytes, 0, bytes.Length);
            // 设置当前流的位置为流的开始  
            stream.Seek(0, SeekOrigin.Begin);

            // 把 byte[] 写入文件  
            FileStream fs = new FileStream(fileName, FileMode.Create);
            BinaryWriter bw = new BinaryWriter(fs);
            bw.Write(bytes);
            bw.Close();
            fs.Close();
        }

        public int  GetContentLengthString(string text)
        {
            text = text.Trim();
            text = Regex.Replace(text, "\r\n", "\n");
            int textLength = 0;
            if (text.Length > 0)
            {
                int min = 41, max = 140, urlLen = 20;
                var n = text;
                var r = Regex.Matches(text, @"http://[a-zA-Z0-9]+(\.[a-zA-Z0-9]+)+([-A-Z0-9a-z_$.+!*()/\\\,:;@&=?~#%]*)*");
                var total = 0;
                for (int m = 0, p = r.Count; m < p; m++)
                {
                    var url = r[m].Value;
                    var byteLen = url.Length + Regex.Matches(url, @"[^\x00-\x80]").Count;
                    if (Regex.IsMatch(url, @"^(http://t.cn)"))
                    {
                        continue;
                    }
                    else if (Regex.IsMatch(url, @"^(http:\/\/)+(weibo.com|weibo.cn)"))
                    {
                        total += byteLen <= min ? byteLen : (byteLen <= max ? urlLen : (byteLen - max + urlLen));
                    }
                    else
                    {
                        total += byteLen <= max ? urlLen : (byteLen - max + urlLen);
                    }
                    n = n.Replace(url, "");
                }
                textLength = (int)Math.Ceiling((total + n.Length + Regex.Matches(n, @"[^\x00-\x80]").Count) / 2.00d);
            }
            return textLength;

          
        }

    }
}
